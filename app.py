import streamlit as st
import plotly.express as px
import freecurrencyapi
import os
import pandas as pd
from dotenv import load_dotenv
from datetime import datetime, timedelta
import time
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
API_KEY = os.getenv("API_KEY")
client = freecurrencyapi.Client(API_KEY)
CSV_FILE_PATH = 'currency_rates.csv'

class CurrencyConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã."""
        self.base_currency = 'USD'
        self.rates = self.load_rates()

    def load_rates(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.
        """
        try:
            with open('rates.json', "r") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_rates(self, rates):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ JSON —Ñ–∞–π–ª.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            rates (dict): –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        """
        with open('rates.json', "w") as f:
            json.dump(rates, f)

    def convert(self, amount: float, from_currency: str, to_currency: str) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            amount (float): –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
            from_currency (str): –í–∞–ª—é—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.
            to_currency (str): –í–∞–ª—é—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            float: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ.
        """
        if not self.rates:
            st.warning("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return 0
        if from_currency != self.base_currency:
            amount /= self.rates.get(from_currency, 1)
        return amount * self.rates.get(to_currency, 1)
    
class Currency_data_fether: 
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –ø–æ–¥–≥—Ä—É–∑–∫–∞ –∏—Ö."""
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API"""
        self.client = client
        self.converter = CurrencyConverter()

    def fetch_and_save_rates(self, date: str, csv_file: str):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            date (str): –î–∞—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
            csv_file (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            result = self.client.historical(date)
            rates = result.get('data', {}).get(date, {})
            
            df = pd.DataFrame([rates])
            df['date'] = date
            df = df[['date'] + [col for col in df.columns if col != 'date']]

            if not os.path.isfile(csv_file):
                df.to_csv(csv_file, index=False)
            else:
                df.to_csv(csv_file, mode='a', header=False, index=False)
            
            print(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_file}.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {e}")

    def fetch_data_for_date_range(self, start_date, end_date):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            start_date (datetime): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
            end_date (datetime): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
        """
        current_date = start_date
        request_count = 0

        while current_date <= end_date:
            date_str = current_date.strftime('%Y-%m-%d')
            self.fetch_and_save_rates(date_str, CSV_FILE_PATH)
            request_count += 1
            current_date += timedelta(days=1)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 10 –∑–∞–ø—Ä–æ—Å–æ–≤
            if request_count == 10:
                st.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
                request_count = 0

        st.success(f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    def fetch_exchange_rates(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ."""
        try:
            data = self.client.latest(base_currency=self.converter.base_currency)
            self.converter.rates = data.get("data", {})
            self.converter.save_rates(self.converter.rates)
            st.success("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

class Currency_plot:
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –∏—Å—Ö–æ–¥—è –æ—Ç –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç."""

    def __init__ (self, csv_file_path):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."""
        self.csv_file_path = csv_file_path 

    def plot_graph(self, currency:str):
        if os.path.isfile(self.csv_file_path):
            df = pd.read_csv(self.csv_file_path )
            df['date'] = pd.to_datetime(df['date'])

            # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            currency = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", options=df.columns[1:])

            if currency in df.columns:
                st.write(f"–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ {currency}")
                fig = px.line(df, x='date', y=currency, title=f"–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ {currency} –∑–∞ –ø–µ—Ä–∏–æ–¥")
                fig.update_layout(
                    plot_bgcolor="rgba(0,0,0,0)",
                    paper_bgcolor="rgba(0,0,0,0)",
                    xaxis_title="–î–∞—Ç–∞",
                    yaxis_title=f"–ö—É—Ä—Å ({currency})",
                    font=dict(size=14)
                )
                st.plotly_chart(fig)
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        else:
            st.warning("–§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç

fetcher = Currency_data_fether()
converter = fetcher.converter
graph = Currency_plot(CSV_FILE_PATH)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
st.title("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ üí∞")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
if st.button("–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"):
    fetcher.fetch_exchange_rates()

if converter.rates:
    amount = st.number_input("–°—É–º–º–∞", min_value=0.0, format="%.2f", label_visibility = "visible")
    from_currency = st.selectbox("–ò–∑ –≤–∞–ª—é—Ç—ã", options=list(converter.rates.keys()))
    to_currency = st.selectbox("–í –≤–∞–ª—é—Ç—É", options=list(converter.rates.keys()))

    if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        result = converter.convert(amount, from_currency, to_currency)
        st.write(f"{amount} {from_currency} = {result:.2f} {to_currency}")
else:
    st.warning("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")


# –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", divider=True)
start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", datetime.now() - timedelta(days=365))
end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", datetime.now())

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
    fetcher.fetch_data_for_date_range(start_date, end_date)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
st.header("–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç", divider=True)

if converter.rates:
    currency = st.selectbox("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", options=list(converter.rates.keys()))
    graph.plot_graph(currency)
else:
    st.warning("–§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")